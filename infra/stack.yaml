xDescription:
    Momodu Afegbua - For Dagram, two tier infrastructure
Parameters:
    EnvironmentName:
        Description: An Environment name that will be prefixed to resources
        Type: String
    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.0.0/16
    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.3.0/24
    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.4.0/24
    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for this - Public Subnet
        Type: String
        Default: 10.0.30.0/24
    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for this - Public Subnet
        Type: String
        Default: 10.0.40.0/24
    KeyName:
        Description: EC2 Keypair for bastion
        Type: String


Resources:
#Virtual Private Network
#Four (4) Subnets; Two(2) Public and Two(2) Private
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
          -   Key: Name
              Value: !Sub ${EnvironmentName}-vpc
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PrivateSubnet1CIDR
        MapPublicIpOnLaunch: false
        Tags:
            -   Key: Name
                Value: !Sub ${EnvironmentName}-private-subnet-AZ1
  PrivateSubnet2:
     Type: AWS::EC2::Subnet
     Properties:
         VpcId: !Ref VPC
         AvailabilityZone: !Select [ 1, !GetAZs '' ]
         CidrBlock: !Ref PrivateSubnet2CIDR
         MapPublicIpOnLaunch: false
         Tags:
            -   Key: Name
                Value: !Sub ${EnvironmentName}-private-subnet-AZ2
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnet1CIDR
        MapPublicIpOnLaunch: true
        Tags:
            -   Key: Name
                Value: !Sub ${EnvironmentName}-public-subnet-AZ1
  PublicSubnet2:
     Type: AWS::EC2::Subnet
     Properties:
         VpcId: !Ref VPC
         AvailabilityZone: !Select [ 1, !GetAZs '' ]
         CidrBlock: !Ref PublicSubnet2CIDR
         MapPublicIpOnLaunch: true
         Tags:
            -   Key: Name
                Value: !Sub ${EnvironmentName}-public-subnet-AZ2

#Internet Gateway is needed to direct traffic from
#the internet to the VPC created up there.

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
         - Key: Name
           Value: !Sub ${EnvironmentName}-igw

#GatewayAttachment attaches the InternetGateway to the VPC           
  InternetGatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Elastic IP address is needed for each availability zone(2)
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachement
    Properties:
      Domain: vpc
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachement
    Properties:
      Domain: vpc

# NatGateway is needed in the two PublicSubnets
# They will enable communications between applications
# in PrivateSubnet(s)     
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NatGateway1EIP.AllocationId
        SubnetId: !Ref PublicSubnet1
        Tags:
           -   Key: Name
               Value: !Sub ${EnvironmentName}-nat-gateway-1
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NatGateway2EIP.AllocationId
        SubnetId: !Ref PublicSubnet2
        Tags:
           -   Key: Name
               Value: !Sub ${EnvironmentName}-nat-gateway-2

# Public RouteTable, Routes and RouteAssociations for PublicSubnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
         -   Key: Name
             Value: !Sub ${EnvironmentName}-public-route-table
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

# Private RouteTable, Routes and RouteAssociations for PrivateSubnets
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        -   Key: Name
            Value: !Sub ${EnvironmentName}-private-route-table-AZ1
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable1'
      NatGatewayId: !Ref 'NatGateway1'
      DestinationCidrBlock: '0.0.0.0/0'
  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        -   Key: Name
            Value: !Sub ${EnvironmentName}-private-route-table-AZ2
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable2'
      NatGatewayId: !Ref 'NatGateway2'
      DestinationCidrBlock: '0.0.0.0/0'
  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2



# Security Groups
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: SecGroup to allow http and ssh traffic to and from LB
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref BastionSecGroup
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0   
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0                       
      Tags:
        -   Key: Name
            Value: !Sub ${EnvironmentName}-lb-server-sg

  BastionSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Bastion security group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        -   Key: Name
            Value: !Sub ${EnvironmentName}-bastion-sg

# Elastic Load Balancer
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      SecurityGroups:
        - Ref: LBSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-lb

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebAppLB
      Port: '80'
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'LoadBalancerListener'
      Priority: 1  

# LB Healthcheck and Target Group
  WebAppTargetGroup:
     Type: AWS::ElasticLoadBalancingV2::TargetGroup
     Properties:
      TargetType: instance
      Tags:
         - Key: Name
           Value: !Sub ${EnvironmentName}-web-server-tg
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'VPC'




####  Bastion
  BastionNode:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 10
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-bastion
      ImageId: ami-005bdb005fb00e791
      InstanceType: t2.micro
      SubnetId:
        Ref: PublicSubnet1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      SecurityGroupIds:
        - Ref: BastionSecGroup


##### Web Servers Auto Scaling + Launch Config
  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: 100
      TargetGroupARNs:
        - !Ref WebAppTargetGroup
      VPCZoneIdentifier:
        - Ref: "PrivateSubnet1"
        - Ref: "PrivateSubnet2"
      LaunchConfigurationName:
        Ref: "WebServerLaunchConfig"
      MinSize: "2"
      MaxSize: "4"
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-web-server-asg
          PropagateAtLaunch: "true"
      

  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            sudo su
            apt-get update -y
            apt-get install -y apache2 awscli
            systemctl start apache2.service               
            cd /var/www/html
            aws s3 cp s3://udagram-momodu/index.html .
      ImageId: ami-005bdb005fb00e791
      KeyName: !Ref KeyName
      IamInstanceProfile:
        Ref: S3RoleForServer
      SecurityGroups:
        - Ref: LBSecGroup
      InstanceType: t2.small
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10


#### EC2 Instance bucket policy
  S3RoleForServer:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: S3ReadBucketEC2
    DependsOn: S3ReadBucketEC2  

  S3ReadBucketEC2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3ReadBucketEC2
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  S3ReadOnlyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3ReadOnlyAccess
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:*
          Resource: "*"
      Roles:
      - Ref: S3ReadBucketEC2

Outputs:
  VPC:
    Description: AWS VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  PrivateSubnet1:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet1CIDR
    Export:
      Name: !Sub "${AWS::StackName}-PRIVSUBNET1"
  PrivateSubnet2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2CIDR
    Export:
      Name: !Sub "${AWS::StackName}-PRIVSUBNET2"
  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1CIDR
    Export:
      Name: !Sub "${AWS::StackName}-PUBSUBNET1"
  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2CIDR
    Export:
      Name: !Sub "${AWS::StackName}-PUBSUBNET2"
  StackIGW:
    Description: Stack IGW ID
    Value: !Ref InternetGateway
    Export:
      Name: !Sub "${AWS::StackName}-IGW"
  BastionIP:
    Description: Bastion Public IP
    Value: !GetAtt BastionNode.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-bastion-public-ip"
  BastionDNS:
    Description: Bastion DNS
    Value: !GetAtt BastionNode.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-bastion-public-dns"
  LoadBalancerDNS:
    Description: LoadBalancer DNS
    Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]
    Export:
      Name: !Sub "${AWS::StackName}-lb-dns"
